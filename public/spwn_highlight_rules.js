/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from spwn.tmLanguage.json (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var SPWNHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
        start: [{
            include: "#root"
        }],
        "#root": [{
            include: "#comments"
        }, {
            include: "#impl"
        }, {
            include: "#obj_or_trigger"
        }, {
            include: "#keywords"
        }, {
            include: "#for_in"
        }, {
            include: "#types"
        }, {
            include: "#constants"
        }, {
            include: "#constants_2"
        }, {
            include: "#ids"
        }, {
            include: "#numbers"
        }, {
            include: "#punctuation"
        }, {
            include: "#func_calls"
        }, {
            include: "#brackets"
        }, {
            include: "#operators"
        }, {
            include: "#strings"
        }],
        "#keywords": [{
            token: "keyword.control.spwn",
            regex: /\b(?:if|else|while|return|extract|break|continue|match|type)\b/
        }, {
            token: "keyword.operator.emerald",
            regex: /\blet\b/
        }, {
            token: "keyword.other.emerald",
            regex: /\b(?:impl|import)\b/
        }],
        "#for_in": [{
            token: "keyword.control.emerald",
            regex: /\bfor\b/,
            push: [{
                token: "keyword.control.emerald",
                regex: /\bin\b/,
                next: "pop"
            }, {
                include: "#root"
            }]
        }],
        "#impl": [{
            token: [
                "keyword.other.astral",
                "text",
                "entity.name.type.astral",
                "text",
                "punctuation.other.bracket.curly.begin.spwn"
            ],
            regex: /\b(impl)\b(\s*)(@[a-zA-Z_]\w*)(\s*)({)/,
            push: [{
                token: "punctuation.other.bracket.curly.end.spwn",
                regex: /\}/,
                next: "pop"
            }, {
                token: "variable.parameter.spwn",
                regex: /\b[a-zA-Z_]\w*\b\s*(?=:)/
            }, {
                include: "#root"
            }]
        }],
        "#obj_or_trigger": [{
            token: [
                "keyword.other.astral",
                "text",
                "punctuation.other.bracket.curly.begin.spwn"
            ],
            regex: /\b(obj|trigger)\b(\s*)({)/,
            push: [{
                token: "punctuation.other.bracket.curly.end.spwn",
                regex: /\}/,
                next: "pop"
            }, {
                token: "variable.parameter.spwn",
                regex: /\b[a-zA-Z_]\w*\b\s*(?=:)/
            }, {
                include: "#root"
            }]
        }],
        "#numbers": [{
            token: "constant.numeric.spwn",
            regex: /\b0b[01](?:_?[01]+)*/
        }, {
            token: "constant.numeric.spwn",
            regex: /\b[0-9][0-9_]*(?:\.[0-9_]+)?/
        }, {
            token: "constant.numeric.spwn",
            regex: /\b0x[a-fA-F0-9](?:_?[a-fA-F0-9]+)*/
        }, {
            token: "constant.numeric.spwn",
            regex: /\b0o[0-7](?:_?[0-7]+)*/
        }, {
            token: "constant.numeric.spwn",
            regex: /\b[0-9][0-9_]*(?:\.[0-9_]+)?/
        }],
        "#constants": [{
            token: "constant.language.astral",
            regex: /\b(?:true|false|null)\b|\$/
        }],
        "#ids": [{
            token: "constant.numeric.spwn",
            regex: /(?:[0-9]+|\?)[gbci]/
        }],
        "#operators": [{
            token: "keyword.operator.astral",
            regex: /[+\-*\/=^<>|&%!]+|\bas\b|\.\.|\bin\b/
        }],
        "#constants_2": [{
            token: "variable.language.astral",
            regex: /\bself\b/
        }],
        "#comments": [{
            token: "punctuation.definition.comment.spwn",
            regex: /\/\*/,
            push: [{
                token: "punctuation.definition.comment.spwn",
                regex: /\*\//,
                next: "pop"
            }, {
                defaultToken: "comment.block.spwn"
            }]
        }, {
            token: "comment.line.spwn",
            regex: /\/\/.*/
        }],
        "#types": [{
            token: "entity.name.type.astral",
            regex: /\b_\b/
        }, {
            token: "entity.name.type.astral",
            regex: /@[a-zA-Z_]\w*/
        }],
        "#func_calls": [{
            token: "entity.name.function.astral",
            regex: /\b[a-zA-Z_]\w*\b\s*(?=\(|![^{=])/
        }],
        "#punctuation": [{
            token: "punctuation.other.astral",
            regex: /[;,:]|->|=>|(?<!\.)\.(?!\.)/
        }],
        "#brackets": [{
            token: "punctuation.other.bracket.curly.begin.spwn",
            regex: /!\{/,
            push: [{
                token: "punctuation.other.bracket.curly.end.spwn",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#root"
            }]
        }, {
            token: "punctuation.other.bracket.curly.begin.spwn",
            regex: /\{/,
            push: [{
                token: "punctuation.other.bracket.curly.end.spwn",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#root"
            }]
        }, {
            token: "punctuation.other.bracket.square.begin.spwn",
            regex: /\[/,
            push: [{
                token: "punctuation.other.bracket.square.end.spwn",
                regex: /\]/,
                next: "pop"
            }, {
                include: "#root"
            }]
        }, {
            token: "keyword.directive.begin.spwn",
            regex: /#\[/,
            push: [{
                token: "keyword.directive.end.spwn",
                regex: /\]/,
                next: "pop"
            }, {
                token: "support.function.directive.spwn",
                regex: /\b(?:example|desc|constructor)\b/
            }, {
                include: "#root"
            }]
        }, {
            token: "punctuation.other.parameters.begin.spwn",
            regex: /(?<!\w\s*)\((?=\s*[a-zA-Z_]\w*\s*(?:,|:(?!:)|=(?![=>])|\)\s*(?:\{|=>)))/,
            push: [{
                token: "punctuation.other.parameters.end.spwn",
                regex: /\)/,
                next: "pop"
            }, {
                include: "#func_args"
            }, {
                include: "#root"
            }],
            comment: "situations like `(a) =>` vs `(a)`"
        }, {
            token: "punctuation.other.bracket.round.begin.spwn",
            regex: /(?<!\w\s*)\(/,
            push: [{
                token: "punctuation.other.bracket.round.end.spwn",
                regex: /\)/,
                next: "pop"
            }, {
                token: "text",
                regex: /(?=,|\s*[a-zA-Z_]\w*\s*(?:,|:(?!:)|=(?![=>])|\)\s*\{))/,
                push: [{
                    token: "text",
                    regex: /(?=\))/,
                    next: "pop"
                }, {
                    include: "#func_args"
                }]
            }, {
                include: "#root"
            }],
            comment: "other situations like (a, b)"
        }, {
            token: "punctuation.other.bracket.round.begin.spwn",
            regex: /\(/,
            push: [{
                token: "punctuation.other.bracket.round.end.spwn",
                regex: /\)/,
                next: "pop"
            }, {
                token: [
                    "variable.parameter.spwn",
                    "text",
                    "keyword.operator.spwn"
                ],
                regex: /\b([a-zA-Z_]\w*)(\s*)(=)(?![=>])/,
                comment: "A named argument"
            }, {
                include: "#root"
            }],
            comment: "Some sort of function call"
        }],
        "#func_args": [{
            token: "variable.language.astral",
            regex: /\bself\b/
        }, {
            token: [
                "variable.parameter.spwn",
                "text",
                "punctuation.other.spwn",
                "keyword.operator.spwn"
            ],
            regex: /\b([a-zA-Z_]\w*)(?:(\s*)(?:(:(?!:))|(=(?![=>])))|\b)/,
            push: [{
                token: "text",
                regex: /(?=[,)])/,
                next: "pop"
            }, {
                include: "#root"
            }]
        }, {
            include: "#root"
        }],
        "#strings": [{
            token: "punctuation.definition.string.begin.spwn",
            regex: /"/,
            push: [{
                token: "punctuation.definition.string.end.spwn",
                regex: /"/,
                next: "pop"
            }, {
                token: "constant.character.escape.spwn",
                regex: /\\./
            }, {
                defaultToken: "string.quoted.double.spwn"
            }]
        }, {
            token: "punctuation.definition.string.begin.spwn",
            regex: /'/,
            push: [{
                token: "punctuation.definition.string.end.spwn",
                regex: /'/,
                next: "pop"
            }, {
                token: "constant.character.escape.spwn",
                regex: /\\./
            }, {
                defaultToken: "string.quoted.single.spwn"
            }]
        }]
    }
    
    this.normalizeRules();
};

SPWNHighlightRules.metaData = {
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    name: "SPWN",
    scopeName: "source.spwn"
}


oop.inherits(SPWNHighlightRules, TextHighlightRules);

exports.SPWNHighlightRules = SPWNHighlightRules;
});